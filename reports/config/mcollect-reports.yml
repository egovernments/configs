ReportDefinitions:
  - reportName: MCollectReceiptRegister
    summary: Report is used for audit and year-end finance reconciliation activities by the ULBs. It also serves as the data dump needed by the ULBs. 
    version: 1.0.0
    moduleName: mcollect
    sourceColumns:
      - name: receiptnumber
        label: reports.mcollect.receiptnumber
        type: string
        source: mcollect
        total: false
      - name: paymentdate
        label: reports.mcollect.paymentdate
        type: string
        source: mcollect
        total: false
      - name: businessservice
        label: reports.mcollect.businessservice
        type: string
        source: mcollect
        total: false
      - name: totaldue
        label: reports.mcollect.totaldue
        type: string
        source: mcollect
        total: true
      - name: amountCollected
        label: reports.mcollect.amountCollected
        type: string
        source: mcollect
        total: true
      - name: payerName
        label: reports.mcollect.payerName
        type: string
        source: mcollect
        total: false
      - name: transactionnumber
        label: reports.mcollect.transactionnumber
        type: string
        source: mcollect
        total: false
      - name: paymentmode
        label: reports.mcollect.paymentmode
        type: string
        source: mcollect
        total: false
      - name: receiptstatus
        label: reports.mcollect.receiptstatus
        type: string
        source: mcollect
        total: false
    searchParams:
      - name: fromDate
        label: reports.mcollect.fromDate
        type: epoch
        source: mcollect
        isMandatory: true
        searchClause: AND ed.receiptdate >= $fromDate
      - name: toDate
        label: reports.mcollect.toDate
        type: epoch
        source: mcollect
        isMandatory: true
        searchClause: AND ed.receiptdate <= $toDate
      - name: receiptstatus
        label: reports.mcollect.receiptstatus
        type: singlevaluelist
        pattern: 'list://New:New,Deposited:Deposited,Dishonoured:Dishonoured'
        source: mcollect
        isMandatory: false
        searchClause: AND ep.paymentstatus <= $receiptstatus
    query: |
          SELECT receiptnumber,payerName,transactionnumber,totaldue,ed.businessservice,paymentmode,To_char(To_timestamp(ed.receiptdate / 1000), 'DD/MM/YYYY') AS paymentdate,
          totalamountpaid AS amountCollected,ep.paymentstatus AS receiptstatus FROM egcl_payment AS ep
          JOIN egcl_paymentdetail AS ed ON ep.id = ed.paymentid where 1=1 AND ep.paymentmode in ('DD','CHEQUE','ONLINE','CASH','CARD')
    orderby: order by ed.receiptdate desc
  
  - reportName: MCollectCollectionReport
    decryptionPathId: MCollectCollectionReport
    summary: It helps administrators track the collection in the ULB and the employee collection performance. 
    version: 1.0.0
    moduleName: mcollect
    sourceColumns:
      - name: service
        label: reports.mcollect.service
        type: string
        source: mcollect
        total: false
      - name: locality
        label: reports.mcollect.locality
        type: string
        source: mcollect
        total: false
        localisationPrefix: TENANTS_MOHALLA_
        isLocalisationRequired: true
      - name: name
        label: reports.mcollect.collectorname
        type: string
        source: mcollect
        total: false
      - name: paymentmode
        label: reports.mcollect.paymentinstrument
        type: string
        source: mcollect
        total: false
      - name: totaltransaction
        label: reports.mcollect.totaltransaction
        type: string
        source: mcollect
        total: true
      - name: amountcollected
        label: reports.mcollect.amountcollected
        type: string
        source: mcollect
        total: true
    searchParams:
      - name: service
        label: reports.mcollect.service
        type: multivaluelist
        pattern: http://egov-mdms-service:8080/egov-mdms-service/v1/_get?tenantId=pb&moduleName=BillingService&masterName=BusinessService&filter=%5B?(@.type=='Adhoc')%5D|$.MdmsRes.BillingService.BusinessService.*.code|$.MdmsRes.BillingService.BusinessService.*.code
        source: mcollect
        wrapper: true
        isMandatory: true
        searchClause: AND ec.businessService = $service
      - name: fromDate
        label: reports.mcollect.fromDate
        type: epoch
        source: mcollect
        isMandatory: true
        searchClause: AND paydl.receiptdate >= $fromDate
      - name: toDate
        label: reports.mcollect.toDate
        type: epoch
        source: mcollect
        isMandatory: true
        searchClause: AND paydl.receiptdate <= $toDate
      - name: name
        label: reports.mcollect.collectorname
        type: singlevaluelist
        pattern: http://egov-hrms:8080/egov-hrms/employees/_search?tenantId=$tenantid&roles=UC_EMP|$.Employees[*].user.id|$.Employees[*].user.name|$.Employees[*].user.username
        source: mcollect
        wrapper: true
        isMandatory: false
        searchClause: AND pay.createdby = $name
      - name: locality
        label: reports.mcollect.locality
        type: singlevaluelist
        pattern: http://egov-location.egov:8080/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=ADMIN&boundaryType=Locality&tenantId=$tenantid|$.TenantBoundary[0].boundary.*.code|$.TenantBoundary[0].boundary.*.code
        source: mcollect
        wrapper: true
        isMandatory: false
        localisationPrefix: TENANTS_MOHALLA_
        isLocalisationRequired: true
        searchClause: AND eca.locality = $locality
      - name: paymentType
        label: reports.mcollect.paymentType
        type: singlevaluelist
        pattern: 'list://CASH:CASH,ONLINE:ONLINE,CARD:CARD,DD:DD,CHEQUE:CHEQUE'
        source: mcollect
        wrapper: true
        isMandatory: false
        isLocalisationRequired: true
        localisationPrefix: COMMON_MASTERS_PAYMENTMODE_
        searchClause: AND pay.paymentmode = $paymentType
    query: |
          Select ec.businessService as service, eca.locality as locality, (select name from eg_user where id = pay.createdby::Integer ) as name, 
          pay.paymentmode as paymentmode, count(*) as totaltransaction, sum(totalamountpaid) as amountcollected from egcl_bill as b 
          inner join egcl_billdetial as bd on b.id = bd.billid AND b.tenantid = bd.tenantid 
          inner join eg_echallan as ec on b.consumercode = ec.challanNo and b.tenantid =ec.tenantid 
          inner join eg_challan_address as eca on ec.id = eca.echallanId 
          inner join egcl_paymentdetail paydl on b.id = paydl.billid and b.tenantid = paydl.tenantid 
          inner join egcl_payment pay on paydl.paymentid = pay.id and paydl.tenantid =pay.tenantid where 1=1
    groupby: group by service,locality, name, paymentmode

  - reportName: MCollectChallanRegister
    summary: Report is used to track and understand the challans generated, outstanding amount, & different status of the challans. 
    version: 1.0.0
    moduleName: mcollect
    sourceColumns:
      - name: service
        label: reports.mcollect.service
        type: string
        source: mcollect
        total: false
      - name: locality
        label: reports.mcollect.locality
        type: string
        source: mcollect
        total: false
        localisationPrefix: TENANTS_MOHALLA_
        isLocalisationRequired: true
      - name: totalchallans
        label: reports.mcollect.totalchallans
        type: string
        source: mcollect
        total: true
      - name: status
        label: reports.mcollect.status
        type: string
        source: mcollect
        total: false
        localisationPrefix: UC_
        isLocalisationRequired: true
      - name: totalamount
        label: reports.mcollect.totalamount
        type: string
        source: mcollect
        total: true
    searchParams:
      - name: service
        label: reports.mcollect.service
        type: singlevaluelist
        pattern: http://egov-mdms-service:8080/egov-mdms-service/v1/_get?tenantId=pb&moduleName=BillingService&masterName=BusinessService&filter=%5B?(@.type=='Adhoc')%5D|$.MdmsRes.BillingService.BusinessService.*.code|$.MdmsRes.BillingService.BusinessService.*.code
        source: mcollect
        wrapper: true
        isMandatory: false
        searchClause: AND ec.businessService = $service
      - name: fromDate
        label: reports.mcollect.fromDate
        type: epoch
        source: mcollect
        isMandatory: false
        searchClause: AND ec.taxPeriodFrom >= $fromDate
      - name: toDate
        label: reports.mcollect.toDate
        type: epoch
        source: mcollect
        isMandatory: false
        searchClause: AND ec.taxPeriodTo <= $toDate
      - name: status
        label: reports.mcollect.status
        type: singlevaluelist
        pattern: http://egov-mdms-service:8080/egov-mdms-service/v1/_get?tenantId=pb&moduleName=mCollect&masterName=applicationStatus&filter=%5B?(@.active)%5D|$.MdmsRes.mCollect.applicationStatus.*.code|$.MdmsRes.mCollect.applicationStatus.*.code
        source: mcollect
        wrapper: true
        isMandatory: false
        localisationPrefix: UC_
        isLocalisationRequired: true
        searchClause: AND ec.applicationStatus = $status
      - name: locality
        label: reports.mcollect.locality
        type: singlevaluelist
        pattern: http://egov-location.egov:8080/egov-location/location/v11/boundarys/_search?hierarchyTypeCode=ADMIN&boundaryType=Locality&tenantId=$tenantid|$.TenantBoundary[0].boundary.*.code|$.TenantBoundary[0].boundary.*.code
        source: mcollect
        wrapper: true
        isMandatory: false
        localisationPrefix: TENANTS_MOHALLA_
        isLocalisationRequired: true
        searchClause: AND eca.locality = $locality  
    query: |
          select ec.businessService as service , eca.locality as locality, ec.applicationStatus as status, count(*)as totalchallans, sum(bd.totalamount) as totalamount from eg_echallan as ec 
          join eg_challan_address as eca on ec.id = eca.echallanId 
          join egbs_billdetail_v1 as bd on ec.challanNo = bd.consumercode where 1=1
    groupby: group by ec.businessService, eca.locality, ec.applicationStatus
